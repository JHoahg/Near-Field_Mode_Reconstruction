//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_35
.address_size 64

	// .weak	cudaMalloc
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z20__generate_k_elementP7double2S0_dmmm
.visible .entry _Z20__generate_k_elementP7double2S0_dmmm(
	.param .u64 _Z20__generate_k_elementP7double2S0_dmmm_param_0,
	.param .u64 _Z20__generate_k_elementP7double2S0_dmmm_param_1,
	.param .f64 _Z20__generate_k_elementP7double2S0_dmmm_param_2,
	.param .u64 _Z20__generate_k_elementP7double2S0_dmmm_param_3,
	.param .u64 _Z20__generate_k_elementP7double2S0_dmmm_param_4,
	.param .u64 _Z20__generate_k_elementP7double2S0_dmmm_param_5
)
{
	.local .align 4 .b8 	__local_depot6[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<7>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<81>;
	.reg .b64 	%rd<34>;


	mov.u64 	%rd33, __local_depot6;
	cvta.local.u64 	%SP, %rd33;
	ld.param.u64 	%rd5, [_Z20__generate_k_elementP7double2S0_dmmm_param_0];
	ld.param.u64 	%rd6, [_Z20__generate_k_elementP7double2S0_dmmm_param_1];
	ld.param.f64 	%fd13, [_Z20__generate_k_elementP7double2S0_dmmm_param_2];
	ld.param.u64 	%rd7, [_Z20__generate_k_elementP7double2S0_dmmm_param_3];
	ld.param.u64 	%rd8, [_Z20__generate_k_elementP7double2S0_dmmm_param_4];
	ld.param.u64 	%rd9, [_Z20__generate_k_elementP7double2S0_dmmm_param_5];
	add.u64 	%rd10, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd10;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r7, %r4, %r5, %r6;
	cvt.u64.u32	%rd2, %r7;
	setp.ge.u64	%p1, %rd2, %rd9;
	@%p1 bra 	BB6_8;

	rem.u64 	%rd11, %rd2, %rd8;
	shr.u64 	%rd12, %rd8, 1;
	sub.s64 	%rd3, %rd11, %rd12;
	shr.u64 	%rd13, %rd7, 1;
	div.u64 	%rd14, %rd2, %rd8;
	sub.s64 	%rd4, %rd14, %rd13;
	mul.lo.s64 	%rd15, %rd3, %rd3;
	shl.b64 	%rd16, %rd15, 2;
	cvt.rn.f64.u64	%fd14, %rd16;
	mul.f64 	%fd15, %fd14, 0d400921FB54442D18;
	mul.f64 	%fd16, %fd15, 0d400921FB54442D18;
	mul.lo.s64 	%rd17, %rd8, %rd8;
	cvt.rn.f64.u64	%fd17, %rd17;
	div.rn.f64 	%fd18, %fd16, %fd17;
	mul.lo.s64 	%rd18, %rd4, %rd4;
	shl.b64 	%rd19, %rd18, 2;
	cvt.rn.f64.u64	%fd19, %rd19;
	mul.f64 	%fd20, %fd19, 0d400921FB54442D18;
	mul.f64 	%fd21, %fd20, 0d400921FB54442D18;
	mul.lo.s64 	%rd20, %rd7, %rd7;
	cvt.rn.f64.u64	%fd22, %rd20;
	div.rn.f64 	%fd23, %fd21, %fd22;
	add.f64 	%fd24, %fd18, %fd23;
	mul.f64 	%fd25, %fd24, 0dBFE0000000000000;
	mul.f64 	%fd26, %fd13, 0d401921FB54442D18;
	div.rn.f64 	%fd77, %fd25, %fd26;
	abs.f64 	%fd27, %fd77;
	setp.neu.f64	%p2, %fd27, 0d7FF0000000000000;
	@%p2 bra 	BB6_3;

	mov.f64 	%fd28, 0d0000000000000000;
	mul.rn.f64 	%fd77, %fd77, %fd28;

BB6_3:
	mul.f64 	%fd29, %fd77, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r21, %fd29;
	st.local.u32 	[%rd1], %r21;
	cvt.rn.f64.s32	%fd30, %r21;
	neg.f64 	%fd31, %fd30;
	mov.f64 	%fd32, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd33, %fd31, %fd32, %fd77;
	mov.f64 	%fd34, 0d3C91A62633145C00;
	fma.rn.f64 	%fd35, %fd31, %fd34, %fd33;
	mov.f64 	%fd36, 0d397B839A252049C0;
	fma.rn.f64 	%fd78, %fd31, %fd36, %fd35;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r8}, %fd77;
	}
	and.b32  	%r9, %r8, 2145386496;
	setp.lt.u32	%p3, %r9, 1105199104;
	@%p3 bra 	BB6_5;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd77;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd10;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd78, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r21, [%rd1];

BB6_5:
	mul.rn.f64 	%fd37, %fd78, %fd78;
	mov.f64 	%fd38, 0d3E21EEA7C1EF8528;
	mov.f64 	%fd39, 0dBDA8FF8320FD8164;
	fma.rn.f64 	%fd40, %fd39, %fd37, %fd38;
	mov.f64 	%fd41, 0dBE927E4F8E06E6D9;
	fma.rn.f64 	%fd42, %fd40, %fd37, %fd41;
	mov.f64 	%fd43, 0d3EFA01A019DDBCE9;
	fma.rn.f64 	%fd44, %fd42, %fd37, %fd43;
	mov.f64 	%fd45, 0dBF56C16C16C15D47;
	fma.rn.f64 	%fd46, %fd44, %fd37, %fd45;
	mov.f64 	%fd47, 0d3FA5555555555551;
	fma.rn.f64 	%fd48, %fd46, %fd37, %fd47;
	mov.f64 	%fd49, 0dBFE0000000000000;
	fma.rn.f64 	%fd50, %fd48, %fd37, %fd49;
	mov.f64 	%fd51, 0d3FF0000000000000;
	fma.rn.f64 	%fd52, %fd50, %fd37, %fd51;
	mov.f64 	%fd53, 0dBE5AE5F12CB0D246;
	mov.f64 	%fd54, 0d3DE5DB65F9785EBA;
	fma.rn.f64 	%fd55, %fd54, %fd37, %fd53;
	mov.f64 	%fd56, 0d3EC71DE369ACE392;
	fma.rn.f64 	%fd57, %fd55, %fd37, %fd56;
	mov.f64 	%fd58, 0dBF2A01A019DB62A1;
	fma.rn.f64 	%fd59, %fd57, %fd37, %fd58;
	mov.f64 	%fd60, 0d3F81111111110818;
	fma.rn.f64 	%fd61, %fd59, %fd37, %fd60;
	mov.f64 	%fd62, 0dBFC5555555555554;
	fma.rn.f64 	%fd63, %fd61, %fd37, %fd62;
	mov.f64 	%fd64, 0d0000000000000000;
	fma.rn.f64 	%fd65, %fd63, %fd37, %fd64;
	fma.rn.f64 	%fd66, %fd65, %fd78, %fd78;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd66;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r11, %temp}, %fd66;
	}
	xor.b32  	%r12, %r10, -2147483648;
	mov.b64 	%fd67, {%r11, %r12};
	and.b32  	%r13, %r21, 1;
	setp.eq.b32	%p4, %r13, 1;
	not.pred 	%p5, %p4;
	selp.f64	%fd79, %fd66, %fd52, %p5;
	selp.f64	%fd80, %fd52, %fd67, %p5;
	and.b32  	%r14, %r21, 2;
	setp.eq.s32	%p6, %r14, 0;
	@%p6 bra 	BB6_7;

	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd79;
	}
	xor.b32  	%r16, %r15, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r17, %temp}, %fd79;
	}
	mov.b64 	%fd79, {%r17, %r16};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r18}, %fd80;
	}
	xor.b32  	%r19, %r18, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r20, %temp}, %fd80;
	}
	mov.b64 	%fd80, {%r20, %r19};

BB6_7:
	cvta.to.global.u64 	%rd22, %rd5;
	cvta.to.global.u64 	%rd23, %rd6;
	add.s64 	%rd24, %rd3, %rd8;
	rem.u64 	%rd25, %rd24, %rd8;
	add.s64 	%rd26, %rd4, %rd7;
	rem.u64 	%rd27, %rd26, %rd7;
	mul.lo.s64 	%rd28, %rd27, %rd8;
	add.s64 	%rd29, %rd28, %rd25;
	shl.b64 	%rd30, %rd29, 4;
	add.s64 	%rd31, %rd23, %rd30;
	ld.global.v2.f64 	{%fd68, %fd69}, [%rd31];
	mul.f64 	%fd71, %fd80, %fd68;
	mul.f64 	%fd73, %fd79, %fd69;
	mul.f64 	%fd74, %fd80, %fd69;
	add.s64 	%rd32, %rd22, %rd30;
	fma.rn.f64 	%fd75, %fd79, %fd68, %fd74;
	sub.f64 	%fd76, %fd71, %fd73;
	st.global.v2.f64 	[%rd32], {%fd76, %fd75};

BB6_8:
	ret;
}

	// .globl	_ZN6SciPAL11CudaComplexIdEC2Edd
.visible .func _ZN6SciPAL11CudaComplexIdEC2Edd(
	.param .b64 _ZN6SciPAL11CudaComplexIdEC2Edd_param_0,
	.param .b64 _ZN6SciPAL11CudaComplexIdEC2Edd_param_1,
	.param .b64 _ZN6SciPAL11CudaComplexIdEC2Edd_param_2
)
{
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN6SciPAL11CudaComplexIdEC2Edd_param_0];
	ld.param.f64 	%fd1, [_ZN6SciPAL11CudaComplexIdEC2Edd_param_2];
	ld.param.f64 	%fd2, [_ZN6SciPAL11CudaComplexIdEC2Edd_param_1];
	st.v2.f64 	[%rd1], {%fd2, %fd1};
	ret;
}

	// .globl	_ZN6SciPAL11CudaComplexIdEC2ERK7double2
.visible .func _ZN6SciPAL11CudaComplexIdEC2ERK7double2(
	.param .b64 _ZN6SciPAL11CudaComplexIdEC2ERK7double2_param_0,
	.param .b64 _ZN6SciPAL11CudaComplexIdEC2ERK7double2_param_1
)
{
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<3>;


	ld.param.u64 	%rd1, [_ZN6SciPAL11CudaComplexIdEC2ERK7double2_param_0];
	ld.param.u64 	%rd2, [_ZN6SciPAL11CudaComplexIdEC2ERK7double2_param_1];
	ld.v2.f64 	{%fd1, %fd2}, [%rd2];
	st.v2.f64 	[%rd1], {%fd1, %fd2};
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot9[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<43>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<100>;


	mov.u64 	%rd99, __local_depot9;
	cvta.local.u64 	%SP, %rd99;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd38;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r41, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB9_13;

	add.s32 	%r16, %r4, -1024;
	shr.u32 	%r17, %r16, 6;
	mov.u32 	%r18, 16;
	sub.s32 	%r5, %r18, %r17;
	mov.u32 	%r19, 19;
	sub.s32 	%r20, %r19, %r17;
	mov.u32 	%r21, 18;
	min.s32 	%r6, %r21, %r20;
	setp.gt.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, 0;
	mov.u64 	%rd92, %rd1;
	@%p2 bra 	BB9_4;

	mov.b64 	 %rd41, %fd4;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd3, %rd42, -9223372036854775808;
	add.s32 	%r7, %r5, -1;
	mov.u64 	%rd91, %rd1;
	bfe.u32 	%r22, %r1, 20, 11;
	add.s32 	%r23, %r22, -1024;
	shr.u32 	%r24, %r23, 6;
	mov.u32 	%r25, 15;
	sub.s32 	%r26, %r25, %r24;
	mul.wide.s32 	%rd43, %r26, 8;
	mov.u64 	%rd44, __cudart_i2opi_d;
	add.s64 	%rd89, %rd44, %rd43;
	mov.u64 	%rd93, 0;
	mov.u64 	%rd90, %rd1;
	mov.u32 	%r40, %r7;

BB9_3:
	.pragma "nounroll";
	mov.u32 	%r8, %r40;
	mov.u64 	%rd7, %rd90;
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd3;    
	mov.b64         {clo,chi}, %rd93;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd93, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r9, %r8, 1;
	sub.s32 	%r27, %r9, %r7;
	mul.wide.s32 	%rd50, %r27, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd13, %rd7, 8;
	mov.u64 	%rd92, %rd13;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r9, %r6;
	mov.u64 	%rd90, %rd13;
	mov.u32 	%r40, %r9;
	@%p3 bra 	BB9_3;

BB9_4:
	st.local.u64 	[%rd92], %rd93;
	ld.local.u64 	%rd94, [%rd1+16];
	ld.local.u64 	%rd95, [%rd1+24];
	and.b32  	%r10, %r3, 63;
	setp.eq.s32	%p4, %r10, 0;
	@%p4 bra 	BB9_6;

	mov.u32 	%r28, 64;
	sub.s32 	%r29, %r28, %r10;
	shl.b64 	%rd51, %rd95, %r10;
	shr.u64 	%rd52, %rd94, %r29;
	or.b64  	%rd95, %rd51, %rd52;
	shl.b64 	%rd53, %rd94, %r10;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r29;
	or.b64  	%rd94, %rd55, %rd53;

BB9_6:
	cvta.to.local.u64 	%rd56, %rd37;
	shr.u64 	%rd57, %rd95, 62;
	cvt.u32.u64	%r30, %rd57;
	shr.u64 	%rd58, %rd94, 62;
	shl.b64 	%rd59, %rd95, 2;
	or.b64  	%rd97, %rd59, %rd58;
	shl.b64 	%rd96, %rd94, 2;
	shr.u64 	%rd60, %rd95, 61;
	cvt.u32.u64	%r31, %rd60;
	and.b32  	%r32, %r31, 1;
	add.s32 	%r33, %r32, %r30;
	neg.s32 	%r34, %r33;
	setp.eq.s32	%p5, %r41, 0;
	selp.b32	%r35, %r33, %r34, %p5;
	st.local.u32 	[%rd56], %r35;
	setp.eq.s32	%p6, %r32, 0;
	@%p6 bra 	BB9_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd96;
	mov.b64         {b2,b3}, %rd97;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd96, {r0,r1};
	mov.b64         %rd97, {r2,r3};
	}
	// inline asm
	xor.b32  	%r41, %r41, -2147483648;

BB9_8:
	clz.b64 	%r42, %rd97;
	setp.eq.s32	%p7, %r42, 0;
	@%p7 bra 	BB9_10;

	shl.b64 	%rd67, %rd97, %r42;
	mov.u32 	%r36, 64;
	sub.s32 	%r37, %r36, %r42;
	shr.u64 	%rd68, %rd96, %r37;
	or.b64  	%rd97, %rd68, %rd67;

BB9_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd97;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd98, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd98, 1;
	@%p8 bra 	BB9_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd98;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd98;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	add.s32 	%r42, %r42, 1;

BB9_12:
	cvt.u64.u32	%rd79, %r41;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r38, 1022;
	sub.s32 	%r39, %r38, %r42;
	cvt.u64.u32	%rd81, %r39;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd98, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB9_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}


